"""
Django settings for archive_project project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path
from dotenv import load_dotenv
import sys

# Load environment variables from .env file
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-j%)np(faguein(=1bu!4&8hx4#+rrp7g6+_+(w1zch)(00d6gn')

DEBUG = True

ALLOWED_HOSTS = ['127.0.0.1', 'localhost', 'file-mapping-app-main-kzta.onrender.com']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'archive_app',  # Custom app for the archive project
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',  # Add WhiteNoise for static files
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'archive_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'archive_project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Check if we're in production (Supabase) or development (SQLite)
DATABASE_URL = os.environ.get('DATABASE_URL')

if DATABASE_URL:
    # Use Supabase PostgreSQL (both development and production)
    try:
        import dj_database_url
        DATABASES = {
            'default': dj_database_url.parse(DATABASE_URL)
        }
        print(f"✅ Using Supabase PostgreSQL: {DATABASE_URL[:50]}...")
    except ImportError:
        print("❌ dj_database_url not found, install it with: pip install dj-database-url")
        # Fallback to SQLite if dj_database_url is not available
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.sqlite3',
                'NAME': '/tmp/db.sqlite3' if os.environ.get('VERCEL') else BASE_DIR / 'db.sqlite3',
            }
        }
    DATABASES['default']['ENGINE'] = 'django_pg8000' 

else:
    # Development: Use SQLite
    print("ℹ️  Using SQLite database")
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': '/tmp/db.sqlite3'if os.environ.get('VERCEL') else BASE_DIR / 'db.sqlite3',
        }
    }

# --- START DIAGNOSTIC BLOCK ---
# Renderの環境変数をデバッグするためのブロック
print("--- STARTING DIAGNOSTICS ---")
database_url = os.environ.get('DATABASE_URL')
supabase_url = os.environ.get('SUPABASE_URL')
supabase_key = os.environ.get('SUPABASE_SERVICE_ROLE_KEY')

# os.environ.get()が何を取得しているか、ブール値でログに出力
print(f"DATABASE_URL is set: {bool(database_url)}")
print(f"SUPABASE_URL is set: {bool(supabase_url)}")
print(f"SUPABASE_SERVICE_ROLE_KEY is set: {bool(supabase_key)}")

# 本番環境（Render）でDATABASE_URLがなければ、SQLiteに頼らずに意図的にデプロイを失敗させる
IS_PRODUCTION = "gunicorn" in sys.argv[0]
print(f"Running in production (gunicorn): {IS_PRODUCTION}")

if IS_PRODUCTION and not database_url:
    print("FATAL ERROR: DATABASE_URL is not set in the production environment!")
    sys.exit(1) # これでビルドが明確に失敗する

print("--- ENDING DIAGNOSTICS ---")
# --- END DIAGNOSTIC BLOCK ---

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

#ファイル保存
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'
STATICFILES_DIRS = [
    BASE_DIR / 'archive_app' / 'static',
]

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
